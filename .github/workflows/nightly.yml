---
name: nightly

on:
  workflow_dispatch:
  push:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Environment Variables
        run: |
          Get-ChildItem Env: | Sort Name

      - name: Checkout DevelopmentEnvironment
        uses: actions/checkout@v2
        with:
          repository: HiranChaudhuri/oolite-windows-build-env
          path: DevelopmentEnvironment

      - name: Checkout Oolite
        uses: actions/checkout@v2
        with:
          path: oolite
          submodules: true

      - name: compile
        shell: cmd
        run: D:\a\oolite\oolite\DevelopmentEnvironment\gcc\Msys_x2\1.0\msys.cmd

      # check http://aegidian.org/bb/viewtopic.php?p=281821#p281821
      - name: check filesystem
        run: |
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE" â€“Recurse

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: Oolite-Windows-Nightly.exe
          path: oolite/installers/win32/O*e
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: oolite
          submodules: true

      - name: check environment before build
        run: |
          env | sort
          cd "$GITHUB_WORKSPACE"
          find .
      - name: build
        run: |
          # install required subsystems
          sudo apt install libgnustep-base-dev
          sudo apt install libsdl1.2-dev
          sudo apt install libvorbis-dev
          sudo apt install libopenal-dev
          sudo apt install libespeak-dev
          sudo apt install libnspr4-dev
          sudo apt install g++
          cd oolite
          # make sure the GNUSTEP_MAKEFILES property is set
          export GNUSTEP_MAKEFILES=/usr/lib/GNUstep/Makefiles
          # build the release
          pushd .
          cd deps/Linux-deps/x86_64/lib_linker; ./make_so_links.sh
          popd
          make -f Makefile release use_deps=yes

      - name: check environment after build
        run: |
          env | sort
          cd "$GITHUB_WORKSPACE"
          find .

#      - name: test
#        run: |
#          openapp oolite/oolite.app

      - name: Prepare AppDir
        run: |
          cd "$GITHUB_WORKSPACE"
          mkdir -p release/Doc
          cp -r oolite/Doc/AdviceForNewCommanders.pdf release/Doc
          cp -r oolite/AddOns release
          cp -r oolite/oolite.app release
          cp -r oolite/deps/Linux-deps/x86_64/lib release/oolite.app
          echo "#!/bin/bash" >release/oolite
          echo "ESPEAK_DATA_PATH=oolite.app/Resources openapp ./oolite.app" >>release/oolite
          chmod +x release/oolite

      - name: fix library path
        run: |
          patchelf --set-rpath '$ORIGIN/lib' release/oolite.app/oolite
          ldd release/oolite.app/oolite | grep "=> /"

      - name: Package tar ball
        run: |
          tar cvfz Oolite-Linux-Nightly.tgz release

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: Oolite-Linux-Nightly.tgz
          path: Oolite-Linux-Nightly.tgz
          if-no-files-found: error

#      - name: Package deb
#        uses: jiro4989/build-deb-action@v2
#        with:
#          package: samplescript
#          package_root: .debpkg
#          maintainer: your_name
#          version: ${{ github.ref }} # refs/tags/v*.*.*
#          arch: 'amd64'
#          depends: 'libc6 (>= 2.2.1), git'
#          desc: 'this is sample package.'

#      - name: Package rpm
#        uses: naveenrajm7/rpmbuild@master
#        with:
#          spec_file: "cello.spec"

      - name: Package appimage
        run: |
          cp "$GITHUB_WORKSPACE/oolite/installers/FreeDesktop/oolite-icon.png" "$GITHUB_WORKSPACE/release/oolite.png"
          cat << EOF > "$GITHUB_WORKSPACE/release/oolite.desktop"
          [Desktop Entry]
          Name=Oolite
          Exec=oolite
          Icon=oolite
          Type=Application
          Categories=Game;
          EOF
          wget -O  "$GITHUB_WORKSPACE/appimagetool-x86_64.AppImage" "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x "$GITHUB_WORKSPACE/appimagetool-x86_64.AppImage"
          ARCH=x86_64 "$GITHUB_WORKSPACE/appimagetool-x86_64.AppImage" "$GITHUB_WORKSPACE/release" "$GITHUB_WORKSPACE/Oolite-Linux-Nightly.AppImage"

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: Oolite-Linux-Nightly.AppImage
          path: Oolite-Linux-Nightly.AppImage
          if-no-files-found: error

  build-mac:
    runs-on: macos-latest
    steps:
      - name: Checkout Oolite
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Checkout libpng
        uses: actions/checkout@v2
        with:
          repository: glennrp/libpng
          path: deps/libpng
          submodules: true

      - name: check environment
        run: |
          xcodebuild -list -workspace Oolite.xcodeproj/project.xcworkspace
          xcodebuild -list -project Oolite.xcodeproj
          echo "Variables:"
          env | sort
          echo "Current directory:"
          pwd
          echo "Filesystem:"
          find .
      - name: run build
        run: |
          #xcodebuild -scheme 'Oolite - Test Release' build
          xcodebuild -configuration "TestRelease" MACOSX_DEPLOYMENT_TARGET=10.9 OTHER_CFLAGS="-Wno-deprecated-declarations"

#      - name: run tests
#        run: |
#          xcodebuild test -scheme 'Oolite - Test Release' -destination target/tests

      - run: echo "create Release's dest folder"
      - run: mkdir -p release/TestRelease
      - run: echo "copy Oolite.app"
      - run: cp -rv build/TestRelease/Oolite.app release/TestRelease || echo "cp Oolite.app failed with $?"
      - run: mkdir "create Documentation folder"
      - run: mkdir -p release/TestRelease/Documentation
      - run: echo "copy documents..."
      - run: cp -v Doc/AdviceForNewCommanders.doc release/TestRelease/Documentation
      - run: cp -v Doc/contributors.txt release/TestRelease/Documentation
      - run: cp -v Doc/GPL.TXT release/TestRelease/Documentation
      - run: cp -v Doc/LICENSE.TXT release/TestRelease/Documentation
      - run: cp -v Doc/OoliteReadMe.pdf release/TestRelease/Documentation
      - run: cp -v Doc/OoliteRS.pdf release/TestRelease/Documentation
      - run: echo "create Extras folder"
      - run: mkdir -p release/TestRelease/Extras
      - run: echo "copy extras"
      - run: cp -v -r tools/BBC\ keys release/TestRelease/Extras
      - run: echo "building ZIP archive"
      - run: cd release; zip --recurse-paths Oolite-MacOS-Nightly.zip TestRelease

      - name: Upload build result
        uses: actions/upload-artifact@v2
        with:
          name: Oolite-MacOS-Nightly.zip
          path: release/Oolite-MacOS-Nightly.zip
          if-no-files-found: error

  # Publish via https://github.com/marketplace/actions/publish-a-release
  release:
    if: ${{ always() }}
    needs:
      - build-windows
      - build-linux
      - build-mac
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: check environment after download
        run: find .

      - name: Publish Release
        id: publish_release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "nightly"
          prerelease: false
          title: "Oolite Nightly - any platform"
          files: |
            Oolite-Windows-Nightly.exe
            Oolite-Linux-Nightly.tgz
            Oolite-MacOS-Nightly.zip
