/*
	oolite-default-atmosphere.fragment
	Default fragment shader for Oolite NEW_PLANETS.


	© 2009–2013 Jens Ayton

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

#define DIFFUSE_LIGHT		(gl_LightSource[1].diffuse.rgb)
#define AMBIENT_LIGHT		(gl_LightModel.ambient.rgb)

#ifndef OOSTD_HARSH_MISTRESS
#define OOSTD_HARSH_MISTRESS 0
#endif

/*	"Harsh shadow factor": degree to which normal map affects global diffuse light
	with terminator and full shadow, as opposed to "local light" which is a normal
	Lambertian light.

	Terminator threshold: defines the width and colour of the terminator. The
	numbers are cosines of the angle where it transitions to full light.

	Both of these factors are ignored in simple shader mode.
*/
#if OOSTD_HARSH_MISTRESS
const vec3				kTerminatorThreshold = vec3(0.08);
#else
const vec3				kTerminatorThreshold = vec3(0.1, 0.105, 0.12);
#endif

uniform vec4			atmPosition;
uniform float			atmRadius;

// No vNormal, because normal is always 0,0,1 in tangent space.
varying vec3			vEyeVector;
varying vec3			vLight1Vector;

vec3 CalcDiffuseIntensity(in vec3 lightVector, in vec3 normal)
{
	float LdotN = lightVector.z;
	float globalTerm = LdotN;
	// Hard terminator with slight redish-orange tinge. Note: threshold values are cosines.
	vec3 baseLight = smoothstep(vec3(0.0), kTerminatorThreshold, vec3(globalTerm));
	return baseLight;
}

void main()
{
	vec3 totalColor = vec3(0);
	vec3 normal = vec3(0, 0, 1);

	// Diffuse light
	vec3 light1Vector = normalize(vLight1Vector);
	vec3 diffuseIntensity = CalcDiffuseIntensity(light1Vector, normal);
	vec3 diffuseLight = diffuseIntensity * DIFFUSE_LIGHT;
	vec3 diffuseColor = DIFFUSE_LIGHT;
	// mix in some light blue color
	totalColor += diffuseColor * diffuseLight * vec3(0.8, 0.8, 1.0);

	// Ambient light, biased towards blue.
	vec3 ambientColor = diffuseColor;
#if !OOSTD_HARSH_MISTRESS
	ambientColor *= vec3(0.8, 0.8, 1.0);
#endif
	totalColor += AMBIENT_LIGHT * ambientColor;

	float atmDistance = length(atmPosition.xyz);
	float minDistance = atmRadius + 3500.0;
	float fadeDist = atmRadius * 12.0;
	float fadeRate = 140000.0;
	float fadeStart = fadeDist - fadeRate;
	float quant = ( atmDistance > fadeStart ? ( fadeRate - (atmDistance - fadeStart) ) / fadeRate : ( atmDistance < (minDistance + 2000.0 ) ? ( atmDistance - minDistance ) / 2000.0 : 1.0) );
	float dp = abs(dot(normalize(vEyeVector), vec3(0.0,0.0,1.0)));
	float gta = step(minDistance, atmDistance) * max(sign(fadeDist - atmDistance), 0.0);
	float newOpacity = (dp > 0.16) ? min(1.0, pow(0.16 / dp, 2.0)) : pow(dp / 0.16, 5.0);
	newOpacity *= gta*quant;

	gl_FragColor = vec4(totalColor, newOpacity);
}
